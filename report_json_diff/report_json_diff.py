# Copyright (c) 2025 GoodRelax
# MIT License
# This code was generated by ChatGPT-4o based on specifications provided by GoodRelax.

import json
import argparse
from pathlib import Path
from html import escape
import csv
from collections import Counter

def normalize(val):
    if isinstance(val, (dict, list)):
        return json.dumps(val, sort_keys=True, ensure_ascii=False)
    return str(val)

def deep_sorted(val):
    if isinstance(val, list):
        return sorted((deep_sorted(v) for v in val), key=lambda x: normalize(x))
    elif isinstance(val, dict):
        return {k: deep_sorted(v) for k, v in sorted(val.items())}
    return val

def find_single_difference_key(json_diff_before, json_diff_after):
    if not isinstance(json_diff_before, dict) or not isinstance(json_diff_after, dict):
        return None
    keys = set(json_diff_before) | set(json_diff_after)
    diffs = []
    for k in keys:
        if k not in json_diff_before or k not in json_diff_after or normalize(json_diff_before.get(k)) != normalize(json_diff_after.get(k)):
            diffs.append(k)
    return diffs[0] if len(diffs) == 1 else None

def count_items(lst):
    norm_map = {}
    counter = Counter()
    for item in lst:
        norm = normalize(deep_sorted(item))
        norm_map[norm] = item
        counter[norm] += 1
    return counter, norm_map

def compare_json(json_diff_before, json_diff_after, path="root"):
    diffs = []

    if isinstance(json_diff_before, dict) and isinstance(json_diff_after, dict):
        single_diff_key = find_single_difference_key(json_diff_before, json_diff_after)
        if single_diff_key:
            if single_diff_key not in json_diff_before:
                diffs.append(("Added", f"{path}.{single_diff_key}", "", json_diff_after[single_diff_key]))
                return diffs
            elif single_diff_key not in json_diff_after:
                diffs.append(("Removed", f"{path}.{single_diff_key}", json_diff_before[single_diff_key], ""))
                return diffs

            sub_before = json_diff_before[single_diff_key]
            sub_after = json_diff_after[single_diff_key]
            new_path = f"{path}.{single_diff_key}"

            if isinstance(sub_before, list) and isinstance(sub_after, list):
                counter_b, map_b = count_items(sub_before)
                counter_a, map_a = count_items(sub_after)

                only_in_b = list((counter_b - counter_a).elements())
                only_in_a = list((counter_a - counter_b).elements())

                if len(only_in_b) == 1 and len(only_in_a) == 1:
                    obj_b = map_b[only_in_b[0]]
                    obj_a = map_a[only_in_a[0]]
                    diffs.extend(compare_json(obj_b, obj_a, new_path))
                    return diffs

            return compare_json(sub_before, sub_after, new_path)

        keys = set(json_diff_before) | set(json_diff_after)
        for k in sorted(keys):
            pa = f"{path}.{k}"
            if k not in json_diff_before:
                diffs.append(("Added", pa, "", json_diff_after[k]))
            elif k not in json_diff_after:
                diffs.append(("Removed", pa, json_diff_before[k], ""))
            else:
                diffs.extend(compare_json(json_diff_before[k], json_diff_after[k], pa))

    elif isinstance(json_diff_before, list) and isinstance(json_diff_after, list):
        if json_diff_before == json_diff_after:
            return diffs
        counter_b, map_b = count_items(json_diff_before)
        counter_a, map_a = count_items(json_diff_after)

        if counter_b == counter_a:
            diffs.append(("Reordered", path, json_diff_before, json_diff_after))
        else:
            for key in (counter_b - counter_a).elements():
                diffs.append(("Removed", path, map_b[key], ""))
            for key in (counter_a - counter_b).elements():
                diffs.append(("Added", path, "", map_a[key]))

    else:
        if json_diff_before != json_diff_after:
            diffs.append(("Modified", path, json_diff_before, json_diff_after))

    return diffs

def generate_html(rows):
    style = """
    <style>
    body { font-family: monospace; background: #f4f4f4; padding: 20px; }
    .table-wrapper { overflow-x: auto; }
    table { border-collapse: collapse; width: 100%; background: white; table-layout: auto; }
    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: left;
      white-space: nowrap;
      vertical-align: top;
    }
    th { background: #e0e0e0; }
    .Added { background-color: #e8f5e9; }
    .Removed { background-color: #ffebee; }
    .Modified { background-color: #fff8e1; }
    .TypeChanged { background-color: #ffe0b2; }
    .Reordered { background-color: #e3f2fd; }
    </style>
    """
    html = [style, "<h2>JSON Diff Report</h2>", '<div class="table-wrapper"><table>']
    html.append("<tr><th>Type</th><th>Path</th><th>Before</th><th>After</th></tr>")
    for diff_type, path, before, after in rows:
        html.append(f'<tr class="{diff_type}"><td>{diff_type}</td><td>{escape(path)}</td><td>{escape(str(before))}</td><td>{escape(str(after))}</td></tr>')
    html.append("</table></div>")
    return "\n".join(html)

def generate_tsv(rows, output_path):
    with open(output_path, "w", encoding="utf-8", newline="") as f:
        writer = csv.writer(f, delimiter="\t")
        writer.writerow(["Type", "Path", "Before", "After"])
        for row in rows:
            writer.writerow(row)

def main():
    parser = argparse.ArgumentParser(description="Compare two JSON files and output differences in HTML and TSV.")
    parser.add_argument("old_json", help="Path to the original JSON file")
    parser.add_argument("new_json", help="Path to the modified JSON file")
    args = parser.parse_args()

    path_old = Path(args.old_json)
    path_new = Path(args.new_json)

    with open(path_old, "r", encoding="utf-8") as f:
        json_diff_before = json.load(f)
    with open(path_new, "r", encoding="utf-8") as f:
        json_diff_after = json.load(f)

    diffs = compare_json(json_diff_before, json_diff_after)

    html = generate_html(diffs)
    out_html = path_old.with_name("json_diff_report.html")
    out_tsv = path_old.with_name("json_diff_report.tsv")

    with open(out_html, "w", encoding="utf-8") as f:
        f.write("<html><body>" + html + "</body></html>")
    generate_tsv(diffs, out_tsv)

    print(f"Report written: {out_html}")
    print(f"Report written: {out_tsv}")

if __name__ == "__main__":
    main()
